#!/usr/bin/env python
# pylint: disable=invalid-name
# pylint: disable=line-too-long
# pylint: disable=too-many-arguments

"""
This module performs a correlation/cluster analysis from gene/protein expression data.
Depending on input parameters it either clusters samples based on similarity (correlation)
among within sample-gene expression or genes based on similarity of expression profiles 
across samples.

It does so by first computing a distance matrix based on correlation and then clustering
that matrix. The clustering/dendrogram definition is returned in newsick format

INPUT FILE
===========
Input data are loaded via a file specified by the -i (--input) option.

Input data are expected to be tab delimited, with one column per sample and one
row per gene.

First two columns should be unique gene identifiers.

Header row should contain sample identifiers with no spaces or symbols in name.

OUTPUT FILE
=============
Writes output to file specified using the -o (--output) option
If sample similarity is specified as the analysis type, the
output file contains an ordered correlation matrix.
If gene similarity is specified as the analysis type, the
output file contains an ordered expression data file.
"""

from __future__ import print_function

import sys
import traceback
import argparse

import json

import pandas as pd
from scipy.cluster.hierarchy import linkage, to_tree
from scipy.spatial.distance import pdist

import seaborn as sns
import numpy as np


def warning(*objs):
    """A wrapper for printing to stderr"""
    print(*objs, file=sys.stderr)


def toNum(s):
    """ Convert string to numeric value, returning int or float as appropriate."""
    try:
        return int(s)
    except ValueError:
        return float(s)


def linkage_to_newick(Z, labels):
    """
    Input :  Z = linkage matrix, labels = leaf labels
    Output:  Newick formatted tree string
    from https://github.com/biocore/scikit-bio/issues/1579
    """
    tree = to_tree(Z, False)

    def build_newick(node, newick, parentdist, leaf_names):
        if node.is_leaf():
            return "%s:%f%s" % (leaf_names[node.id], (parentdist - node.dist)/2, newick)
        else:
            if len(newick) > 0:
                newick = "):%f%s" % ((parentdist - node.dist)/2.0, newick)
            else:
                newick = ");"
            newick = build_newick(node.get_left(), newick,
                                  node.dist, leaf_names)
            newick = build_newick(node.get_right(), ",%s" %
                                  (newick), node.dist, leaf_names)
            newick = "(%s" % (newick)
            return newick
    return build_newick(tree, "", tree.dist, labels)


def generate_image(by, transpose=False):
    """ use seaborn to generate a downloadable heatmap """
    rowCluster = True if (by == 'row' or by == 'both') else False
    colCluster = True if (by == 'column' or by == 'both') else False

    plot = sns.clustermap(data, standard_scale=0, metric="correlation",
                          row_cluster=rowCluster, col_cluster=colCluster, cmap='viridis')
    imgName = args.img if args.img is not None else 'expression_heatmap'
    plot.savefig(imgName + ".png")
    plot.savefig(imgName + ".svg")


def cluster(labels, transpose=False):
    """ cluster data by gene/row """
    if args.verbose:
        warning("Tree labels:", labels)

    # calc correlation/as pdist object from transposed matrix
    dist = None
    if transpose:
        dist = pdist(data.T, metric='correlation')
    else:
        dist = pdist(data, metric="correlation")

    # cluster and get dendrogram structure in newick format
    # , optimal_ordering=True)  # -- pmacs LPC version too old for python 2.7
    Z = linkage(dist, method='complete')
    return linkage_to_newick(Z, labels)


def get_labels(axis):
    if axis == "column":
        return args.columnDisplayNames.split(',') if args.columnDisplayNames else list(data.columns.values)
    else:  # assume row for now
        return args.rowDisplayNames.split(',') if args.rowDisplayNames else list(data.index.values)


if __name__ == "__main__":

    parser = argparse.ArgumentParser()

    parser.add_argument('-i', '--input',
                        help="input file name and full path", required=True)
    parser.add_argument('-o', '--output',
                        help="output file name and full path", required=True)
    parser.add_argument('--img', help="img file name and full path")
    parser.add_argument('-r', '--rows',
                        help="cluster rows only", action="store_true")
    parser.add_argument('-c', '--cluster', choices=['row', 'column', 'both'],
                        help="clustering axis", required=True)
    parser.add_argument('--columnDisplayNames',
                        help="comma separated list of column names; if not supplied will use column headers")
    parser.add_argument('--rowDisplayNames',
                        help="comma separated list of row names; if not supplied will use row names (first column)")
    parser.add_argument('--verbose', action="store_true")
    args = parser.parse_args()

    # warning(args)

    try:
        if args.verbose:
            warning("Loading input file")
        data = pd.read_csv(args.input, header=0, index_col=0, sep=',')
        if args.verbose:
            warning(data)
    except pd.io.common.EmptyDataError as e:
        warning("ERROR: Input file " + args.input + " is empty.")
    except IOError as e:
        warning("ERROR: Input file " + args.input + " could not be read.")

    result = {}
    if args.cluster in ['row', 'both']:
        result['rowTree'] = cluster(get_labels("row"))
    if args.cluster in ['column', 'both']:
        result['colTree'] = cluster(get_labels("column"), transpose=True)

    generate_image(by=args.cluster)

    with open(args.output, 'w') as of:
        json.dump(result, of)
